#include <iostream>
#include <fstream>
#include <stack>

using std::ofstream;
using std::ifstream;
using std::ios;
using std::cout;
using std::stack; 

void readFromFile(ifstream& file) {

	//file.open("expressions.txt");

	stack<int> stackOfNumbers;
	char isItNumber;
	int firstElementOfStack, secondElementOfStack, result;
	int number;
	char sign;

	while (!file.eof()) {
		//	file >> isItNumber;
		isItNumber = file.peek();
		if (isItNumber != '+' || isItNumber != '-' || isItNumber != '/' || isItNumber != '*') {

			file >> number;
			stackOfNumbers.push(number);
		}
		else {
			file >> sign;
			//cout << operators << " ";

			switch (sign) {

			case '+': {
				if (stackOfNumbers.empty()) {
					cout << "Warning! The stack is empty! ";
				}
				else {

					firstElementOfStack = stackOfNumbers.top();

					stackOfNumbers.pop();
				}
				if (stackOfNumbers.empty()) {
					cout << "Warning! The stack is empty!";
				}
				else {
					secondElementOfStack = stackOfNumbers.top();

					stackOfNumbers.pop();
				}
				result = secondElementOfStack + firstElementOfStack;

				stackOfNumbers.push(result);
			}break;

			case '-': {
				if (stackOfNumbers.empty()) {
					cout << " Warning! The stack is empty! ";
				}
				else {
					firstElementOfStack = stackOfNumbers.top();
					stackOfNumbers.pop();
				}
				if (stackOfNumbers.empty()) {
					cout << "Warning! The stack is empty!";
				}
				else {
					secondElementOfStack = stackOfNumbers.top();
					stackOfNumbers.pop();
				}
				result = secondElementOfStack - firstElementOfStack;
				stackOfNumbers.push(result);
			}break;

			case '/': {
				if (stackOfNumbers.empty()) {
					cout << "Warning! The stack is empty!";
				}
				else {
					firstElementOfStack = stackOfNumbers.top();
					stackOfNumbers.pop();
				}
				if (stackOfNumbers.empty()) {
					cout << "Warning! The stack is empty!";
				}
				else {
					secondElementOfStack = stackOfNumbers.top();
					stackOfNumbers.pop();
				}
				result = secondElementOfStack / firstElementOfStack;
				stackOfNumbers.push(result);
			}break;

			case '*': {
				if (stackOfNumbers.empty()) {
					cout << "Warning! The stack is empty! ";
				}
				else {
					firstElementOfStack = stackOfNumbers.top();
					stackOfNumbers.pop();
				}
				if (stackOfNumbers.empty()) {
					cout << "Warning! The stack is empty!";
				}
				else {
					secondElementOfStack = stackOfNumbers.top();
					stackOfNumbers.pop();
				}
				result = secondElementOfStack * firstElementOfStack;
				stackOfNumbers.push(result);
			}break;
			}
		}

		if (file.peek() == ';') {
			cout << stackOfNumbers.top() << " ";
			stackOfNumbers.pop();
			file.ignore();
		}

		file.ignore(1, ' ');
	}
		
	
	while (!stackOfNumbers.empty())
	{
		cout << stackOfNumbers.top() << " ";
		stackOfNumbers.pop();
	}
}
/*void writeToBinaryFile(ofstream& file1) {

}
*/
int main() {

	ifstream myFile("expressions.txt");
	readFromFile(myFile);



	system("pause");
	return 0;
}
